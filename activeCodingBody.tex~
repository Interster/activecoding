


\part[Inleidende Beginsels]
{Inleidende Beginsels tot Konsep\\ van Programmering}

\chapter[Inleiding]
{Inleiding}

Daar is verskeie programmeringstale in die w\^ereld soos python, C, Pascal, C\#, Fortran, Matlab, Lisp Visual Basic om maar net 'n paar te noem.  Python is 'n taal wat maklik is om te leer en 'n goeie begrip van hierdie taal dek al die basiese aspekte van programmering.  Voorts is pyhton 'n taal wat baie geskik is vir ingenieurswese, data wetenskap en masjienleerkunde.  Aangesien dit ook 'n oopbron taal is en dus gratis is, is daar verskeie goeie redes waarom dit 'n goeie taal is om mee te begin programmeer.  Behalwe vir al hierdie voordele is python ook 'n baie maklike taal om aan te leer.  Hierdie handleiding fokus hoofsaaklik op python.

Programmering is net 'n kommunikasiemiddel soos enige taal.  In die geval van programmeertale, kommunikeer die mens net met masjiene in plaas van met ander mense.

Programmering het baie meer toeganklik geword onlangs as gevolg van goedkoop hardeware en die internet.  Github, die sosiale netwerk en programkode stoorplek vir programmeerders het 40 miljoen programmeerders of gebruikers gehad aan die begin van die jaar 2020.  Dit mag na baie mense klink, maar dit is slegs 0.6\% van die w\^ereldpopulasie.  Dus, al het programmering baie toeganklik geword vir almal is daar baie ruimte vir nog meer programmeerders om deel te word van hierdie groep mense.

Programmering is 'n wye veld en behels vanaf die uitwerk van 'n algoritme met pseudokode tot die vertaling van pseudokode in 'n spesifieke taal. Verder behels dit ook die bestuur van die weergawes van die kode met 'n sagteware argiveringstelsel soos git, asook die dokumentasie van die programme.

In die komende jare gaan die vaardigheid om vinnig te kan tik en om te kan programmeer so belangrik wees soos om geletterd te wees in die verle\"e dae.  Met masjienleerkunde, kunsmatige intelligensie en die internet in die 4de industri\"ele rewolusie is dit die sleutelvaardighede vir die nabye toekoms.

Oopbronsagteware en Linux is ook baie belangrik omdat dit rekenaarwetenskap goedkoop en toeganklik maak.  Dit maak dit toegangklik want hierdie sagteware loop op byna enige hardeware en dit is gratis.  Jy kan ook maklik leer deur voorbeeldkode wat vryelik beskikbaar is op die internet.

Moderne rekenaars is oral rondom ons en is oral beskikbaar.  Die selfone wat ons almal besit het meer prosesseringsvermo\"e het as die maanlandings rekenaar.  Rekenaars en programmering het al hoe meer betrokkenheid in ons lewens en daar is behalwe selfone meer rekenaars rondom as wat ons dink.  Dink maar aan voertuie en selfs die element\^e sagteware op jou TV se afstandbeheer.  Hierdie handleiding is 'n deur tot die w\^ereld van programmering en hopelik maak dit veel meer deure vir jou oop in die toekoms deur jou die basiese vaardighede van programmering te leer.




\chapter[Pseudokode]
{Pseudokode}
  

Gee voorbeeld deur 'n while lus te doen met mense. 'n teller tel op tot 3 waarna die persoon na regs gestuur word indien teller bo 3 is.

\chapter[Veranderlikes]
{Veranderlikes}

\section{Verduideliking van konsepte}

'n Basiese beginsel in programmering is die veranderlike.  Dit is 'n naam of letter waarin 'n waarde gestoor word.  Dit kan van 'n eenvoudige letter wees soos 'n `a' of `z' of ''n naam soos byvoorbeeld `waarde'.  Dit kan onderskrifte soos `\_' bevat en is kas sensitief wat beteken dat die veranderlike `Waarde' en `waarde' twee verskillende veranderlikes is.  Dus is dit belangrik om op te let of 'n veranderlike naam hoofletters of kleinletters het.

'n Veranderlike mag geen vreemde karakters soos `\&' of `*' bevat nie.  Gewoonlik bevat 'n veranderlike 'n numeriese waarde soos `2' of `33'.  Veranderlikes kan ook letters van woorde bevat.  Basies stoor dit inligting deur dit in 'n boks te plaas wat die rekenaar stoor in 'n plek in die geheue. 

Begin die python opdragvenster deur python3 te tik in die venster soos volg:

\begin{lstlisting}[style=DOS]
gebruiker@rekenaar:~$ python3
Python 3.4.3 (default, Nov 12 2043, 22:20:49) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
\end{lstlisting}

By hierdie aanhits `$>>>$' kan jy nou 'n veranderlike naam intik en dit 'n waarde gee soos volg:

\begin{lstlisting}[style=DOS]
>>>a = 1
>>>b = 1
>>>a + b
3
\end{lstlisting}

In die bostaande venster het jy nou 'n veranderlike `a' die waarde van 1 gegee en `b' die waarde van 1 gegee.  Wanneer jy hulle bymekaar tel met die `+' teken, gee python die antwoord en druk dit op die skerm.  Indien jy die waarde van hierdie som in 'n derde verandelike `c' wil stoor, sal dit soos volg daaruit sien:

\begin{lstlisting}[style=DOS]
>>>a = 1
>>>b = 1
>>>c = a + b
>>>print(c)
2
\end{lstlisting}

Dit sal nou nie die antwoord wys nie, maar python het 'n manier om die antwoord te vertoon met behulp van die `print' stelling.  Die `print' stelling is 'n voorbeeld van 'n funksie waarvan ons later meer sal leer.  'n Funksie vereis dat jy dit 'n argument, in hierdie geval `c', moet verskaf.

Net soos optel of `+', kan python verskeie ander operateurs ook verstaan.  Aftrek is byvoorbeeld `-', vermenigvuldig word gedoen met `*' en deel word gedoen met '/'.  Magsverheffing word bereik deur `**' te tik.  Hier is 'n voorbeeld van die verskillende operateurs:

\lstset{caption={Aftrek}}
\begin{lstlisting}[style=DOS]
>>>c = a - b
>>>print(c)
0
\end{lstlisting}


\lstset{caption={Vermenigvuldig}}
\begin{lstlisting}[style=DOS]
>>>c = a * b
>>>print(c)
1
\end{lstlisting}


\lstset{caption={Deel}}
\begin{lstlisting}[style=DOS]
>>>c = a / b
>>>print(c)
1
\end{lstlisting}


\lstset{caption={Kwadraat of magsverheffing met 2}}
\begin{lstlisting}[style=DOS]
>>>c = a**2
>>>print(c)
1
>>>a = 2
>>>c = a**2
>>>print(c)
4
\end{lstlisting}


Partykeer wil programmeerder 'n woord in 'n veranderlike stoor.  Dit word baie soortgelyk aan getalle gedoen.  Dit is belangrik dat al die letters van die woord tussen aanhalingstekens is.  Die aanhalingstekens vertel vir python dat daar 'n string in die veranderlike gestoor gaan word.  Die volgende voorbeeld illustreer hoe dit werk:

\begin{lstlisting}[style=DOS]
>>>woord_1 = 'abc'
>>>woord_2 = '123'
>>>woord_1 + woord_2
'abc123'
\end{lstlisting}

Hier het nou 'n paar interessante dinge gebeur:  Eerstens het julle nou gesien 'n veranderlike mag ook getalle bevat.  Verder het hierdie voorbeeld ook gewys dat ons woorde aanmekaar kan vassit deur die optel teken te gebruik.  'n Goeie voorbeeld waar ons dit sal wil gebruik is byvoorbeeld wanneer jy die kinders in 'n klas se name wil inlees, tesame met hulle vanne.  Dan kan jy die naam en die van aanmekaar vassit, met 'n spasie tussenin en dan as een vertoon:

\begin{lstlisting}[style=DOS]
>>>Naam = 'Piet'
>>>Van = 'Pompies'
>>>kombo = Naam + ' ' + Van
>>>print(kombo)
'Piet Pompies'
\end{lstlisting}


\section{Oefeninge}

\begin{enumerate}
\item Die verplasing $s$ van 'n voorwerp met 'n beginsnelheid van $u$ en 'n versnelling van $a$ word na 'n sekere tyd $t$ aangegee deur die volgende vergelyking: \\
$s = ut + \frac{1}{2}at^2$
Neem aan dat die beginsnelheid 2m/s, die versnelling 0.1m/s$^2$ en die tyd verloop 5 sekondes is.  Bereken nou die verplasing $s$ deur gebruik te maak van veranderlikes.  Tik die proses uit in die python beheervenster.
\end{enumerate}


\begin{lstlisting}[style=DOS]
>>> u = 2
>>> t = 5
>>> a = 0.1
>>> s = u*t + 0.5*a*t**2
>>> print(s)
11.25
\end{lstlisting}



\part[Basiese Beginsels]
{Basiese Beginsels van\\ Programmering}

\chapter[Die if stelling]
{Die if stelling}

Verduidelik die stelling

Boolse logika vinnig verduidelik

4.  Die skikking datastruktuur

Klomp boksies in 'n ry gevul met nommers


% Python listings instellings
\lstset{language=Python}
\lstset{frame=lines}
\lstset{caption={Insert code directly in your document}}
\lstset{label={lst:code_direct}}
\lstset{basicstyle=\footnotesize}
\begin{lstlisting}
from brg.datastructures import Mesh
 
mesh = Mesh.from_obj('faces.obj')
mesh.draw()
\end{lstlisting}

\lstset{caption={Uit leer:}}
\lstinputlisting[language=Python]{sample.py}


\chapter[Die for stelling]
{Die for stelling}

Gebruik die for stelling om 'n skikking te kwadreer


\chapter[Die while stelling]
{Die while stelling}

Verduidelik dit met die borrelsorteer algoritme


\chapter[Funksies]
{Funksies}


Funksies breek moeilike take op in 'n klomp klein takies.

Funksie definisie in python

Klein funksie om lineêre funksie waarde te bereken. y = mx + c


7.10  Rekursie

\chapter[Prosedurele programmering]
{Prosedurele programmering}


Programme wat bestaan uit klomp funksies met een ingangspunt in die program.

\part[Gevorderde Beginsels]
{Gevorderde Beginsels van\\ Programmering}

\chapter[Objek gebaseerde programmering]
{Objek gebaseerde programmering}


Model van objek met funksies wat geroep word as iets met objek gebeur.

Definieer sirkel as objek.  Bereken area en die omtrek as die metodes van die objek.  Die eienskap is die radius van sirkel.




\chapter[Netwerke]
{Netwerke}

Die internet en hoe netwerke werk in neutedop

\part[Konfigurasie Aspekte]
{Konfigurasie Aspekte van\\ Programmering}

\chapter[git]
{Sagteware argivering met git}



Geskiedenis van git. Linus Torvalds skryf Linux en kon nie kommersiële sagteware kry wat werk nie en toe skep hy git

Algemene gebruik van git

Clone en commit

\chapter[Dokumentasie]
{Dokumentasie}


Markdown 

Voorbeeld van dokument met formule

LaTeX

Voorbeeld van dokument met formule
